import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from collections import deque
from torch.distributions import Categorical
import random
import time
import csv  # Import csv module for writing to CSV file
import psutil  # For memory usage
import os  # For memory tracking

# Encoder (for preprocessing state input)
class Encoder(nn.Module):
    def __init__(self, input_size, encoded_size):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_size, 64)
        self.fc2 = nn.Linear(64, encoded_size)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        return torch.relu(self.fc2(x))
    
    
# PPO Model
class PPO(nn.Module):
    def __init__(self, encoded_size, action_size):
        super(PPO, self).__init__()
        self.fc1 = nn.Linear(encoded_size, 128)
        self.fc2 = nn.Linear(128, 128)
        self.actor = nn.Linear(128, action_size)  # Policy network
        self.critic = nn.Linear(128, 1)  # Value network

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        policy_logits = self.actor(x)
        value = self.critic(x)
        return policy_logits, value

# Vehicle Production Environment (aligned with MDP)
class VehicleEnvironment:
    def __init__(self):
        self.state_size = 8  # Updated state to reflect new MDP
        self.action_space = 3  # 0: final line, 1: buffer line, 2: return faulty
        self.reset()

    def reset(self):
        self.state = np.random.rand(self.state_size)  # Random initial state
        return self.state

    def step(self, action):
        green_priority, faulty_flag, buffer_occupancy, waiting_time, min_wait_time, buffer_full, anomaly_flag, production_rate = self.state
        reward = 0
        done = False

        # Action logic
        if action == 0:  # Final assembly line
            if faulty_flag:
                reward = -10
            elif green_priority:
                reward = 15
            else:
                reward = 5

        elif action == 1:  # Move to buffer
            if buffer_full:
                reward = -8
            else:
                reward = 5 + (green_priority * 2)

        elif action == 2:  # Return faulty
            if faulty_flag:
                reward = 10
            else:
                reward = -3

        # Simulate state transitions
        buffer_occupancy = min(buffer_occupancy + (action == 1), 1.0)
        waiting_time += 1
        if waiting_time > min_wait_time:
            reward -= 2

        # Add anomaly penalty
        if anomaly_flag:
            reward -= 5

        # New random state (for simplicity, replace with proper transitions in a real environment)
        self.state = np.random.rand(self.state_size)
        return self.state, reward, done

# Replay Buffer (for experience storage)
class ReplayBuffer:
    def __init__(self, capacity):
        self.buffer = deque(maxlen=capacity)

    def add(self, state, action, reward, next_state, done):
        self.buffer.append((state, action, reward, next_state, done))

    def sample(self, batch_size):
        batch = random.sample(self.buffer, batch_size)
        states, actions, rewards, next_states, dones = zip(*batch)
        return (np.array(states), np.array(actions), np.array(rewards),
                np.array(next_states), np.array(dones))

    def __len__(self):
        return len(self.buffer)

# PPO Agent
class PPOAgent:
    def __init__(self, state_size, action_size, encoded_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = ReplayBuffer(10000)
        self.encoder = Encoder(state_size, encoded_size)  # Encoder integration
        self.model = PPO(encoded_size, action_size)
        self.optimizer = optim.Adam(self.model.parameters(), lr=0.001)
        self.gamma = 0.99
        self.eps_clip = 0.2
        self.entropy_coeff = 0.01

    def act(self, state):
        state = torch.FloatTensor(state).unsqueeze(0)
        encoded_state = self.encoder(state)
        policy_logits, _ = self.model(encoded_state)
        policy = Categorical(logits=policy_logits)
        action = policy.sample()
        return action.item(), policy.log_prob(action), policy.entropy()

    def compute_advantages(self, rewards, values, dones):
        advantages = []
        g = 0
        for reward, value, done in zip(reversed(rewards), reversed(values), reversed(dones)):
            g = reward + self.gamma * g * (1 - done)
            advantages.insert(0, g - value)
        return advantages

    def update(self, states, actions, log_probs, returns, advantages):
        states = torch.FloatTensor(states)
        actions = torch.LongTensor(actions)
        log_probs = torch.FloatTensor(log_probs).detach()  # Detach log_probs
        returns = torch.FloatTensor(returns)
        advantages = torch.FloatTensor(advantages).detach()  # Detach advantages

        encoded_states = self.encoder(states)  # Ensure states are encoded

        for _ in range(5):  # PPO typically uses multiple update steps
            policy_logits, values = self.model(encoded_states)
            values = values.squeeze()

            policy = Categorical(logits=policy_logits)
            new_log_probs = policy.log_prob(actions)
            entropy = policy.entropy().mean()

            ratio = torch.exp(new_log_probs - log_probs)  # log_probs is detached now

            # Compute surrogate loss
            surrogate_loss = -torch.min(
                ratio * advantages, 
                torch.clamp(ratio, 1 - self.eps_clip, 1 + self.eps_clip) * advantages
            ).mean()

            value_loss = (returns - values).pow(2).mean()
            loss = surrogate_loss + 0.5 * value_loss - self.entropy_coeff * entropy

            self.optimizer.zero_grad()
            loss.backward(retain_graph=True)  # Keep the graph for the next backward pass
            self.optimizer.step()

            # Detach `log_probs` for the next iteration to avoid backprop on the same graph
            log_probs = new_log_probs.detach()

    def save_metrics_to_csv(self, metrics, episode):
        metrics_file = "S2_PPO_500_training_metrics.csv"
        header = [
            "Episode", "Total Reward", "Reward Variance", "Avg Reward per Step", "Mean Episode Length",
            "Actor Loss", "Critic 1 Loss", "Critic 2 Loss", "Entropy Loss", "Training Time (s)", "Memory Usage (MB)"
        ]

        file_exists = os.path.isfile(metrics_file)  # Check if file exists

        with open(metrics_file, mode='a', newline='') as file:
            writer = csv.writer(file)
        
            # Write header only if file is empty (first time writing)
            if not file_exists:
                writer.writerow(header)
    
            # Append data for the current episode
            writer.writerow([
                episode + 1,
                metrics["reward_total_per_episode"][-1],
                metrics["reward_variance"][-1],
                metrics["avg_reward_per_step"][-1],
                metrics["mean_episode_lengths"][-1],
                metrics["losses"][-1],  # Fixed key to match the stored loss
                "N/A",  # Placeholder for Critic 1 Loss (not applicable for DQN)
                "N/A",  # Placeholder for Critic 2 Loss (not applicable for DQN)
                "N/A",  # Placeholder for Entropy Loss (not applicable for DQN)
                metrics["training_times"][-1],
                metrics["memory_usage"][-1]
            ])

# Training Loop with advanced metrics tracking
env = VehicleEnvironment()
state_size = 8  # Updated state size to reflect MDP changes
action_size = env.action_space
encoded_size = 32  # Encoder output size
agent = PPOAgent(state_size, action_size, encoded_size)

num_episodes = 500
max_steps_per_episode = 3000
batch_size = 64
total_rewards = []

# Metrics storage
metrics = {
    "reward_total_per_episode": [],
    "reward_variance": [],
    "avg_reward_per_step": [],
    "mean_episode_lengths": [],
    "losses": [],
    "training_times": [],
    "memory_usage": [],
}

for episode in range(num_episodes):
    state = env.reset()
    total_reward = 0
    start_time = time.time()
    episode_losses = []

    for step in range(max_steps_per_episode):
        action, log_prob, entropy = agent.act(state)
        next_state, reward, done = env.step(action)
        agent.memory.add(state, action, reward, next_state, done)

        state = next_state
        total_reward += reward

        episode_losses.append(reward)  # Track losses as rewards for simplicity

        if done:
            break

    # Update the agent periodically
    if len(agent.memory) >= batch_size:
        states, actions, rewards, next_states, dones = agent.memory.sample(batch_size)
        # Compute advantages and returns
        advantages = agent.compute_advantages(rewards, [0] * len(rewards), dones)
        agent.update(states, actions, rewards, rewards, advantages)

    # Episode metrics
    metrics["reward_total_per_episode"].append(total_reward)
    metrics["reward_variance"].append(np.var(episode_losses))
    metrics["avg_reward_per_step"].append(np.mean(episode_losses) if episode_losses else 0)
    metrics["mean_episode_lengths"].append(step + 1)
    metrics["losses"].append(np.mean(episode_losses) if episode_losses else 0)
    metrics["training_times"].append(time.time() - start_time)
    metrics["memory_usage"].append(psutil.Process(os.getpid()).memory_info().rss / (1024 * 1024))  # Memory in MB

     # Save metrics after every episode
    agent.save_metrics_to_csv(metrics, episode)
    
    # Print metrics
    print(f"Episode {episode + 1}:")
    print(f"  Total Reward          : {total_reward:.2f}")
    print(f"  Reward Variance       : {metrics['reward_variance'][-1]:.2f}")
    print(f"  Avg Reward per Step   : {metrics['avg_reward_per_step'][-1]:.2f}")
    print(f"  Episode Length        : {metrics['mean_episode_lengths'][-1]}")
    print(f"  Loss (Mean)           : {metrics['losses'][-1]:.2f}")
    print(f"  Training Time (s)     : {metrics['training_times'][-1]:.2f}")
    print(f"  Memory Usage (MB)     : {metrics['memory_usage'][-1]:.2f}")
